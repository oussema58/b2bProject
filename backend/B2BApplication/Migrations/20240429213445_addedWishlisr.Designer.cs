// <auto-generated />
using System;
using B2BApplication.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace B2BApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240429213445_addedWishlisr")]
    partial class addedWishlisr
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("B2BApplication.Models.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleID"));

                    b.Property<string>("ArticleBarCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArticleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ArticleEtat")
                        .HasColumnType("bit");

                    b.Property<string>("ArticleIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ArticlePrixHT")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<bool>("ArticleStatistique")
                        .HasColumnType("bit");

                    b.Property<int>("CatalogueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FamilleId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxeId")
                        .HasColumnType("int");

                    b.Property<string>("UserCreatedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserModifiedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("nbArticleSold")
                        .HasColumnType("int");

                    b.HasKey("ArticleID");

                    b.HasIndex("CatalogueId");

                    b.HasIndex("FamilleId");

                    b.HasIndex("TaxeId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("article");
                });

            modelBuilder.Entity("B2BApplication.Models.ArticleInStore", b =>
                {
                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("articleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("articleEtat")
                        .HasColumnType("bit");

                    b.Property<int>("articleID")
                        .HasColumnType("int");

                    b.Property<string>("articleIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("catalogueId")
                        .HasColumnType("int");

                    b.Property<string>("catalogueIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("catalogueParentId")
                        .HasColumnType("int");

                    b.Property<int>("nbArticleSold")
                        .HasColumnType("int");

                    b.Property<int>("tarifEnteteId")
                        .HasColumnType("int");

                    b.Property<double>("tarifPrix")
                        .HasColumnType("float");

                    b.Property<int>("taxeId")
                        .HasColumnType("int");

                    b.Property<double>("taxeTaux")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("ArticleInStore", (string)null);
                });

            modelBuilder.Entity("B2BApplication.Models.Catalogue", b =>
                {
                    b.Property<int>("CatalogueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatalogueId"));

                    b.Property<string>("CatalogueIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CatalogueNiveau")
                        .HasColumnType("int");

                    b.Property<int?>("CatalogueParentId")
                        .HasColumnType("int");

                    b.HasKey("CatalogueId");

                    b.HasIndex("CatalogueParentId");

                    b.ToTable("catalogue");
                });

            modelBuilder.Entity("B2BApplication.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codePostale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("entTarifId")
                        .HasColumnType("int");

                    b.Property<string>("intitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("matricule_Fiscale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("entTarifId");

                    b.ToTable("client");
                });

            modelBuilder.Entity("B2BApplication.Models.Commande", b =>
                {
                    b.Property<int>("commandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commandeId"));

                    b.Property<string>("clientCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<string>("clientIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("commandeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("commandeDateLivraisonPrevue")
                        .HasColumnType("datetime2");

                    b.Property<string>("commandeNumero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("commandeTotalHt")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("commandeTotalTaxes")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("commandeTotalTtc")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("commandesNbrArticles")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("statutId")
                        .HasColumnType("int");

                    b.Property<string>("userCreateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("commandeId");

                    b.HasIndex("clientId");

                    b.HasIndex("statutId");

                    b.HasIndex("userCreateId");

                    b.ToTable("commandes");
                });

            modelBuilder.Entity("B2BApplication.Models.CommandeLigne", b =>
                {
                    b.Property<int>("ligneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ligneId"));

                    b.Property<string>("articleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("articleId")
                        .HasColumnType("int");

                    b.Property<string>("articleIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("articlePrixHt")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("articlePrixTtc")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<double>("articleTauxTva")
                        .HasPrecision(18, 3)
                        .HasColumnType("float(18)");

                    b.Property<int?>("commandeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ligneQuantite")
                        .HasColumnType("int");

                    b.Property<decimal>("ligneTotalHt")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("ligneTotalTaxes")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("ligneTotalTtc")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ligneId");

                    b.HasIndex("articleId");

                    b.HasIndex("commandeId");

                    b.HasIndex("userId");

                    b.ToTable("commandeLignes");
                });

            modelBuilder.Entity("B2BApplication.Models.DemandeRetour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("adminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<int>("commandeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("nbArtcileRetenue")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("adminId");

                    b.HasIndex("clientId");

                    b.HasIndex("commandeId")
                        .IsUnique();

                    b.HasIndex("userId");

                    b.ToTable("demandesRetour");
                });

            modelBuilder.Entity("B2BApplication.Models.Famille", b =>
                {
                    b.Property<int>("FamilleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilleId"));

                    b.Property<string>("FamilleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilleIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FamilleId");

                    b.ToTable("famille");
                });

            modelBuilder.Entity("B2BApplication.Models.LigneDemandeRetour", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("artcileIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("articleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("articleId")
                        .HasColumnType("int");

                    b.Property<int>("commandeLigneId")
                        .HasColumnType("int");

                    b.Property<int>("demandeRetourId")
                        .HasColumnType("int");

                    b.Property<int>("motifId")
                        .HasColumnType("int");

                    b.Property<int>("nbArticleRetenue")
                        .HasColumnType("int");

                    b.Property<int>("nbArticleTotale")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("articleId");

                    b.HasIndex("commandeLigneId")
                        .IsUnique();

                    b.HasIndex("demandeRetourId");

                    b.HasIndex("motifId");

                    b.ToTable("lignedemandesRetour");
                });

            modelBuilder.Entity("B2BApplication.Models.LignePanier", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("articleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ligneQuantite")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("articleId");

                    b.HasIndex("userId");

                    b.ToTable("lignePaniers");
                });

            modelBuilder.Entity("B2BApplication.Models.LigneWishlist", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("articleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("articleId");

                    b.HasIndex("userId");

                    b.ToTable("ligneWishList");
                });

            modelBuilder.Entity("B2BApplication.Models.Motif", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("intitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("motifs");
                });

            modelBuilder.Entity("B2BApplication.Models.Societe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codePostale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("emailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("intitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("matricule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("matriculeFiscal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("registreCommerce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("societe");
                });

            modelBuilder.Entity("B2BApplication.Models.Statut", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("statusId"));

                    b.Property<string>("statusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("statustIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("statusId");

                    b.ToTable("statusCommandes");
                });

            modelBuilder.Entity("B2BApplication.Models.Tarif", b =>
                {
                    b.Property<int>("TarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TarifId"));

                    b.Property<double>("TarifPrix")
                        .HasColumnType("float");

                    b.Property<int>("articleId")
                        .HasColumnType("int");

                    b.Property<int>("tarifEnteteId")
                        .HasColumnType("int");

                    b.HasKey("TarifId");

                    b.HasIndex("articleId");

                    b.HasIndex("tarifEnteteId");

                    b.ToTable("tarifs");
                });

            modelBuilder.Entity("B2BApplication.Models.TarifEntete", b =>
                {
                    b.Property<int>("TarifEnteteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TarifEnteteId"));

                    b.Property<string>("Tarif_Entete_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Tarif_Entete_DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tarif_Entete_intitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TarifEnteteId");

                    b.ToTable("TarifEntete");
                });

            modelBuilder.Entity("B2BApplication.Models.Taxe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TaxeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxeIntitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TaxeTaux")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("taxe");
                });

            modelBuilder.Entity("B2BApplication.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("clientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("etat")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("clientId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("B2BApplication.Models.Article", b =>
                {
                    b.HasOne("B2BApplication.Models.Catalogue", "Catalogue")
                        .WithMany()
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.Famille", "Famille")
                        .WithMany()
                        .HasForeignKey("FamilleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.Taxe", "Taxe")
                        .WithMany()
                        .HasForeignKey("TaxeId");

                    b.HasOne("B2BApplication.Models.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("B2BApplication.Models.User", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedId");

                    b.Navigation("Catalogue");

                    b.Navigation("Famille");

                    b.Navigation("Taxe");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("B2BApplication.Models.Catalogue", b =>
                {
                    b.HasOne("B2BApplication.Models.Catalogue", "CatalogueParent")
                        .WithMany()
                        .HasForeignKey("CatalogueParentId");

                    b.Navigation("CatalogueParent");
                });

            modelBuilder.Entity("B2BApplication.Models.Client", b =>
                {
                    b.HasOne("B2BApplication.Models.TarifEntete", "tarifEntete")
                        .WithMany()
                        .HasForeignKey("entTarifId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tarifEntete");
                });

            modelBuilder.Entity("B2BApplication.Models.Commande", b =>
                {
                    b.HasOne("B2BApplication.Models.Client", "client")
                        .WithMany()
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.Statut", "statut")
                        .WithMany("commandes")
                        .HasForeignKey("statutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.User", "userCreate")
                        .WithMany()
                        .HasForeignKey("userCreateId");

                    b.Navigation("client");

                    b.Navigation("statut");

                    b.Navigation("userCreate");
                });

            modelBuilder.Entity("B2BApplication.Models.CommandeLigne", b =>
                {
                    b.HasOne("B2BApplication.Models.Article", "article")
                        .WithMany()
                        .HasForeignKey("articleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.Commande", "commande")
                        .WithMany("lignes")
                        .HasForeignKey("commandeId");

                    b.HasOne("B2BApplication.Models.User", "userCreate")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("commande");

                    b.Navigation("userCreate");
                });

            modelBuilder.Entity("B2BApplication.Models.DemandeRetour", b =>
                {
                    b.HasOne("B2BApplication.Models.User", "admin")
                        .WithMany()
                        .HasForeignKey("adminId");

                    b.HasOne("B2BApplication.Models.Client", "client")
                        .WithMany("demandesRetour")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.Commande", "commande")
                        .WithOne("demandeRetour")
                        .HasForeignKey("B2BApplication.Models.DemandeRetour", "commandeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.User", "userCreatedBy")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("admin");

                    b.Navigation("client");

                    b.Navigation("commande");

                    b.Navigation("userCreatedBy");
                });

            modelBuilder.Entity("B2BApplication.Models.LigneDemandeRetour", b =>
                {
                    b.HasOne("B2BApplication.Models.Article", "article")
                        .WithMany()
                        .HasForeignKey("articleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.CommandeLigne", "commandeLigne")
                        .WithOne("ligneRetour")
                        .HasForeignKey("B2BApplication.Models.LigneDemandeRetour", "commandeLigneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.DemandeRetour", "demandeRetour")
                        .WithMany("lignes")
                        .HasForeignKey("demandeRetourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.Motif", "motif")
                        .WithMany()
                        .HasForeignKey("motifId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("commandeLigne");

                    b.Navigation("demandeRetour");

                    b.Navigation("motif");
                });

            modelBuilder.Entity("B2BApplication.Models.LignePanier", b =>
                {
                    b.HasOne("B2BApplication.Models.Article", "article")
                        .WithMany()
                        .HasForeignKey("articleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.User", "userCreate")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("userCreate");
                });

            modelBuilder.Entity("B2BApplication.Models.LigneWishlist", b =>
                {
                    b.HasOne("B2BApplication.Models.Article", "article")
                        .WithMany()
                        .HasForeignKey("articleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.User", "userCreate")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("userCreate");
                });

            modelBuilder.Entity("B2BApplication.Models.Tarif", b =>
                {
                    b.HasOne("B2BApplication.Models.Article", "article")
                        .WithMany("tarifs")
                        .HasForeignKey("articleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.TarifEntete", "tarifEntete")
                        .WithMany("tarifs")
                        .HasForeignKey("tarifEnteteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("tarifEntete");
                });

            modelBuilder.Entity("B2BApplication.Models.User", b =>
                {
                    b.HasOne("B2BApplication.Models.Client", "client")
                        .WithMany("users")
                        .HasForeignKey("clientId");

                    b.Navigation("client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("B2BApplication.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("B2BApplication.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B2BApplication.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("B2BApplication.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("B2BApplication.Models.Article", b =>
                {
                    b.Navigation("tarifs");
                });

            modelBuilder.Entity("B2BApplication.Models.Client", b =>
                {
                    b.Navigation("demandesRetour");

                    b.Navigation("users");
                });

            modelBuilder.Entity("B2BApplication.Models.Commande", b =>
                {
                    b.Navigation("demandeRetour")
                        .IsRequired();

                    b.Navigation("lignes");
                });

            modelBuilder.Entity("B2BApplication.Models.CommandeLigne", b =>
                {
                    b.Navigation("ligneRetour")
                        .IsRequired();
                });

            modelBuilder.Entity("B2BApplication.Models.DemandeRetour", b =>
                {
                    b.Navigation("lignes");
                });

            modelBuilder.Entity("B2BApplication.Models.Statut", b =>
                {
                    b.Navigation("commandes");
                });

            modelBuilder.Entity("B2BApplication.Models.TarifEntete", b =>
                {
                    b.Navigation("tarifs");
                });
#pragma warning restore 612, 618
        }
    }
}
